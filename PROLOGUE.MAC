;; A header macro file that defines a lot of common useful macros when
;; programming in assembly.  Supports conditional assembly for taking
;; advantage of 80286 opcodes.

IS286	equ	0		;; True if taking advantage of 80286 opcodes.

;IF IS286
;.286
;ENDIF

SETUPSEGMENT	macro	 

SEGMENT _TEXT	PARA PUBLIC 'CODE'
	ASSUME	CS:_TEXT

	Endm

SEG_OFF	Struc	
POFF	dw	?
PSEG	dw	?
SEG_OFF	Ends

FARPTR	UNION	
DPTR	dd	?
XPTR	SEG_OFF <>
FARPTR	ENDS


ShiftR	macro 	REG,XTIMES
;; 2 - shift a register right a number of times.
IF      IS286
        shr     REG,XTIMES
ELSE
        REPT    XTIMES
	shr	REG,1
        ENDM
ENDIF
        endm

ShiftL	macro  	REG,XTIMES
;; 3 - shift a register left a number of times
IF      IS286
        shl     REG,XTIMES
ELSE
        REPT    XTIMES
	shl	REG,1
        ENDM
ENDIF
        endm

LSMUL	macro	
;; 4 - performs a long signed multiply AX,DX * BX,CX
	LOCAL	@@HOP1,@@HOP2
;; Long signed multiply
;; Long #1: AX,DX
;; Long #2: BX,CX
	push	si
	xchg	si,ax
	xchg	dx,ax
	or	ax,ax
	jz	@@HOP1
	mul	bx
@@HOP1: xchg	cx,ax
	or	ax,ax
	jz	@@HOP2
	mul	si
	add	cx,ax
@@HOP2: xchg	si,ax
	mul	bx
	add	dx,cx
	pop	si
	endm

LongShiftL	macro	XTIMES
;; 5 - Shift left AX,DX times.
	REPT 	XTIMES
	shl	ax,1
	rcl	dx,1
	ENDM
	endm

LongShiftR	macro	XTIMES
;; 6 - Shifr right AX,DX times
	REPT 	XTIMES
	sar	dx,1
	rcr	ax,1
	ENDM
	endm

ShiftAL	macro	REG,XTIMES
;; 7 - shift arithmetic left register, times
IF      IS286
	sal	REG,XTIMES
ELSE
        REPT    XTIMES
	sal	REG,1
        ENDM
ENDIF
	endm

ShiftAR	macro	REG,XTIMES
;; 8 - Shifr arithmatic right register, times
IF      IS286
	sar	REG,XTIMES
ELSE
        REPT    XTIMES
	sar	REG,1
        ENDM
ENDIF
	endm

PushI	macro   VALUE
;; 9 - Push an immediat onto the stack.
;; Push Immediate
IF      IS286
        push    VALUE
ELSE
        mov     ax,VALUE
        push    ax
ENDIF
        endm

PushEA	macro   MYDATA
;; 10 - Push an effective address onto the stack.
;; Push Effective address
IF      IS286
        push    offset MYDATA
ELSE
        mov     ax,offset MYDATA
        push    ax
ENDIF
        endm
        
PushFar	macro   MYDATA
;; 11 - Push far address (relative to DS) onto the stack.
        push    ds              ; push the segment
        PushEA  MYDATA            ; push the offset
        endm

PushAll	macro   
;; 12 - Push ALL registers onto the stack.
;; Save all registers
IF      IS286
        pusha                   ;; if a 286 machine use the pusha opcode
        push    ds              ;; save segment DS
        push    es              ;; save segment ES
ELSE
        push    ax              ;; if not 286 machine use normal method
        push    bx
        push    cx
        push    dx
        push    si
        push    di
        push    bp
        push    ds
        push    es
ENDIF
        endm

PopAll	macro   
;; 13 - Pop all registers off of the stack.
;;; Restore all registers from a push all
IF      IS286
        pop     es
        pop     ds
        popa
ELSE
        pop     es
        pop     ds
        pop     bp
        pop     di
        pop     si
        pop     dx
        pop     cx
        pop     bx
        pop     ax
ENDIF
        endm

DOSTerminate	macro   
;; 14 - Terminate back to DOS
	mov	ah,4Ch
        int     21h
        endm

DosTSR	macro   LOC
;; 15 - Terminate and stay resident back to DOS
        xlea    dx,<LOC+100h>   ; (End of program plus PSP)
        int     27h             ; Terminate and stay resident.
        endm

Message	macro   mydata
;; 16 - Print a '$' terminated string to the console
	push	ax
        mov     ah,9            ; Function 9 write string
        xlea    dx,mydata       ; Get the address of the message
        int     21h             ; Send the message to the screen.
	pop	ax
        endm

PENTER	macro   STORAGE
;; 17 - Enter a procedue with storage space
;; Procedure enter, uses the 286/386 ENTER opcode
IF      IS286
        enter   STORAGE,0       ; nexting level, always zero.
ELSE
        push    bp
        mov     bp,sp
        IF      STORAGE
        sub     sp,STORAGE
        ENDIF
ENDIF
        endm

PLEAVE	macro   
;; 18 - Exit a procedure with stack correction.
IF      IS286
        leave
ELSE
        mov     sp,bp
        pop     bp
ENDIF
        endm

PushCREGS	macro   
;; 19 - Save registers for C
        push    es
	push	ds   ;The Kernel is responsible for maintaining DS
        push    si
        push    di
        cld
        endm

PopCREGS	macro   
;; 20 - Restore registers for C
        pop     di
        pop     si
	pop	ds ;The Kernel is responsible for maintaining DS
        pop     es
        endm

;; macro used to insert breakpoints in code to invoke the debugger.  Using
;; the macro allows for easier searches to be done on debug invokations.
DoDebug	macro	
	int	3
	endm

SwapSegs	macro	
	push	es
	push	ds
	pop	es
	pop	ds
	endm


CALLF	macro	procedure
;; This macro fakes a far call to a procedure which is near and dear to
;; us but defined as far.  This is done to avoid fixups and so that
;; kernel objects are COMable.	It is used when a kernel service, which
;; is defined as a far procedure, needs to be called locally.
	push	cs
	call	near ptr procedure
	endm

NibbleOut	macro	
	LOCAL	@@OK
	push	ax
	and	ax,0Fh
	add	ax,'0'
	cmp	ax,'9'
	jle	@@OK
	sub	ax,'9'+1
	add	ax,'A'
@@OK:	mov	[es:di],al
	sub	di,2
	pop	ax
	shr	ax,4		; down one nibble
	endm

HEXPRINT	macro reg,xloc,yloc
	push	es
	push	di
	push	ax
	mov	ax,reg
	push	ax
	mov	ax,0b800h
	mov	es,ax
	mov	di,yloc*160+xloc*2+4*2
	pop	ax
	NibbleOut
	NibbleOut
	NibbleOut
	NibbleOut
	pop	ax
	pop	di
	pop	es
	endm

